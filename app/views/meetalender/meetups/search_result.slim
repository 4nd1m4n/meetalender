/ TODO(Schau): How to integrate pagination into this form view? (Is this even all that easily possible with data that doesn't live in the database?)

ul.list
  - @groups_id_name&.each do |group|
    li
      .row
        .col-md-12.d-flex.item
          .item-content.meetup_group

            .item-title
              .inputs
                .checkbox_label
                  .div class="custom-control custom-checkbox"
                    = check_box_tag "[selected_groups_ids][]", "#{group[:id]}", false, id: "group_#{group[:id]}", class: "custom-control-input"
                    = label_tag "group_#{group[:id]}", group[:name], class: "custom-control-label"
                    = hidden_field_tag "[groups]#{group[:id]}[name]", group[:name]
                    = link_to "View on Meetup", group[:link], class: 'btn btn-secondary float-right ml-4'
                .approved_cities
                  = text_field_tag "[groups]#{group[:id]}[approved_cities]", nil, class: "custom-control"
                  / NOTE(Schau): Link_to's that look like buttons, have the city names that where found in the venue hash and on click add that city name to the input field followed by a coma

            .item_meta
              / TODO(Schau): Make all additional info unfoldable
              .events

                .past_events
                  h5 Past Events
                  - if @found_last_grouped_events&.key?(group[:id])
                    - @found_last_grouped_events[group[:id]].each do |event|
                        .event
                          .name = event["name"].to_s
                          .time
                            .start = l(Time.at(Rational(event["time"].to_i, 1000), Rational(event["utc_offset"].to_i, 24*60*601000)), format: :long)
                          .yes_rsvp_count = event["yes_rsvp_count"].to_s + " Teilnemher"

                span class="border-top my-3"

                .upcoming_events
                  h5 Upcoming
                  - if @found_upcoming_grouped_events&.key?(group[:id])
                    - @found_upcoming_grouped_events[group[:id]].each do |event|
                      .event
                        .name = link_to event["name"], event["link"]
                        .time
                          .city = "In ".to_s + event.dig("venue", "city").to_s + ", Von ".to_s
                          .start = l(Time.at(event["time"].to_i.div(1000)), format: :long)
                          .to bis
                          .end = l(Time.at((event["time"].to_i + event["duration"].to_i).div(1000)), format: :short)
                        / TODO(Schau): One could make the city name of the found events clickable so that the user easily can add this city's name to the list of approved cities. (One should research if Meetup has a way to represent each city on the planet with an id that the system gave this city's name. (Or Meetup realy relies on strings, then this doesn't quite make the effort worth.))
                        .description
                          = sanitize(event["description"])

= form.form_actions do
  = form.submit "Add selected Meetup Groups", class: "btn btn-primary"
  = link_to 'Cancel', admin_meetups_path, class: "btn btn-link"